import { ThrowStmt } from '@angular/compiler';
import { Component, OnInit,OnDestroy, ViewChild } from '@angular/core';
import { RouterModule } from '@angular/router';
import { NgbDateAdapter, NgbDateParserFormatter, NgbPaginationConfig } from '@ng-bootstrap/ng-bootstrap';
import { NgPopupsService } from 'ng-popups';
import { ToastrService } from 'ngx-toastr';
import { CustomAdapter, CustomDateParserFormatter } from 'src/app/helpers/ngx-bootstrap.config';
import { validateLocaleAndSetLanguage } from 'typescript';
import { adminService } from '../../../admn/services/account.service';
import { authService } from '../../../auth/services/auth.service';
import { lov } from '../../../helpers/lov';
import { outbouln_md, outbound_ls, outbound_md, outbound_pm } from '../../Models/oub.order.model';
import { ouprepService } from '../../Services/oub.prep.service';
import { outboundService } from '../../Services/oub.service';

declare var $: any;
@Component({
  selector: 'appoub-processdistribute',
  templateUrl: 'oub.process.distribute.html',
  styles: ['.dgorder { height:35Opx !important; } ','.dglines { height:335px !important; } .dginfo { height:365px !important; }'] ,
  providers: [NgbPaginationConfig,
    {provide: NgbDateAdapter, useClass: CustomAdapter},
    {provide: NgbDateParserFormatter, useClass: CustomDateParserFormatter}] 

})
export class oubprocessdistComponent implements OnInit {
  public lsstate:lov[] = new Array();
  public lstype:lov[] = new Array();
  public instocksum:number = 0;
  public rqedit:number = 0;
  public crstate:boolean = false;

  public lsorder:outbound_ls[] = new Array();
  public slcorder:outbound_md;
  public slclines:outbouln_md[] = new Array();
  public lshandle:lov[] = new Array();
  
  public slclineso:number = 0;
  public slcliness:number = 0;
  public slcproduct:string = "";
  public slcprodesc:string = "";
  public slcthcode:string = "";
  public slcthname:string = "";
  public slcdateplan:Date | string;
  public slcdateexp:Date | string;
  
  public pm: outbound_pm = new outbound_pm();
  public crtab:number = 1;
  public dateformat:string;
  public dateformatlong:string;
    constructor(private sv: outboundService,
                private pv: ouprepService,
                private av: authService, 
                private mv: adminService,
                private router: RouterModule,
                private toastr: ToastrService,                
                private ngPopups: NgPopupsService,) { 
      this.av.retriveAccess();  
      this.dateformat = this.av.crProfile.formatdate;
      this.dateformatlong = this.av.crProfile.formatdatelong;
    }

    ngOnInit(): void { }
    ngOnDestroy():void {  }
    ngAfterViewInit(){  this.setupJS(); /*setTimeout(this.toggle, 1000);*/this.getstate(); this.gettype(); this.fnd(); }
    setupJS() { 
        // sidebar nav scrolling
        $('#accn-list .sidebar-scroll').slimScroll({ height: '95%', wheelStep: 5, touchScrollStep: 50, color: '#cecece' });   
    }
    getIcon(o:string){ return "";  }
    //toggle(){ $('.snapsmenu').click();  }
    decstate(o:string){ return this.lsstate.find(x=>x.value == o).desc; }
    decstateicn(o:string){ return this.lsstate.find(x=>x.value == o).icon; }
    dectype(o:string) { return this.lstype.find(x=>x.value == o).desc; }
    getstate(){ 
        this.mv.getlov("OUORDER","FLOW").pipe().subscribe(
            (res) => { this.lsstate = res; },
            (err) => { this.toastr.error("<span class='fn-1e15'>"+((err.error == undefined) ? err.message : err.error.message)+"</span>",null,{ enableHtml : true });  },
            () => { }
          );
    }
    gettype(){ 
        this.mv.getlov("TASK","TYPE").pipe().subscribe(
            (res) => { this.lstype = res;  },
            (err) => { this.toastr.error("<span class='fn-1e15'>"+((err.error == undefined) ? err.message : err.error.message)+"</span>",null,{ enableHtml : true });  },
            () => { }
          );
    }
    fnd(){ 
      this.pm.spcarea = "XD";
      this.sv.listdist(this.pm).subscribe(            
        (res) => { 
            this.lsorder = res;
            this.lsorder.forEach(x=>x.selc = false);            
          },
        (err) => { this.toastr.error("<span class='fn-1e15'>"+((err.error == undefined) ? err.message : err.error.message)+"</span>",null,{ enableHtml : true });  },
        () => { } 
      );
    }
    getinfo(o:outbound_ls){
      this.slcprodesc = o.disproductdesc;
      this.slcthcode = o.thcode;
      this.slcthname = o.thname;
      this.slcdateexp = o.dateexpire;
      this.slcdateplan = o.dateprep

      this.sv.get(o).subscribe(            
        (res) => { 
          this.slcorder = res; this.slclines = res.lines; 
          this.slclineso = this.slclines.reduce((obl, val) => obl += val.qtysku, 0); 
          this.slcliness = this.slclines.reduce((obl, val) => obl += val.qtystock, 0);
          
          this.slcproduct = this.slclines[0].article;
          this.slcprodesc = this.slclines[0].articledsc;

          o.tflow = (this.slcliness >= this.slclineso) ? "RP" : "NE";
        },
        (err) => { this.toastr.error("<span class='fn-1e15'>"+((err.error == undefined) ? err.message : err.error.message)+"</span>",null,{ enableHtml : true });  },
        () => { } 
      );
    }
    gotoprocess(){
      this.ngPopups.confirm('Do you confirm to process distribute ?')
      .subscribe(res => {
          if (res) {
            // this.crstock.tflow = (this.crstate == true) ? "IO" : "XX";
            // this.sv.setstockInfo(this.crstock).subscribe(            
            //   (res) => { 
            //     this.instock = res; 
            //     this.instocksum = this.instock.lines.reduce((obl, val) => obl += val.qtysku, 0);
            //     this.toastr.success("<span class='fn-1e15'>modify stock line success</span>",null,{ enableHtml : true }); 
            //   },
            //   (err) => { this.toastr.error("<span class='fn-1e15'>"+((err.error == undefined) ? err.message : err.error.message)+"</span>",null,{ enableHtml : true });  },
            //   () => { } 
            // ); 
            
            this.pv.procdistb(this.lsorder.filter(x=>x.selc == true)).subscribe(            
              (res) => { 
                this.toastr.success("<span class='fn-1e15'>Process distribution order success</span>",null,{ enableHtml : true }); 
              },
              (err) => { this.toastr.error("<span class='fn-1e15'>"+((err.error == undefined) ? err.message : err.error.message)+"</span>",null,{ enableHtml : true });  },
              () => { } 
            );  

          } 
      });

    }



    ngLnselc(ln:outbound_ls) { ln.selc = (ln.selc == true)? false : true; }
    ngLnselcAll() { 
      if (this.lsorder.length > 0) { 
        if(this.lsorder[0].selc == true){ 
          this.lsorder.forEach(e=>e.selc = false);
        }else { 
          this.lsorder.forEach(e=>e.selc = true);
        }
      }
    }

}
